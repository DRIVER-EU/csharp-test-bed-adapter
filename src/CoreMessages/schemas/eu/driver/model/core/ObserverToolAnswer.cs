// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.core
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class ObserverToolAnswer : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"ObserverToolAnswer\",\"namespace\":\"eu.driver.model.core\",\"" +
				"fields\":[{\"name\":\"trialId\",\"doc\":\"The unique identifier of the running Trial.\",\"" +
				"type\":\"int\"},{\"name\":\"sessionId\",\"doc\":\"The sessionId for the running Trial.\",\"t" +
				"ype\":\"int\"},{\"name\":\"answerId\",\"doc\":\"The id of the answer in OST databased.\",\"t" +
				"ype\":\"int\"},{\"name\":\"timeSendUTC\",\"doc\":\"The time when questionnaire was sent as" +
				" the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC" +
				".\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"timeWhen\",\"doc\":\"The" +
				" time provided by user in the questionnaire (could be simulation time) was sent " +
				"as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 U" +
				"TC.\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"observationTypeNam" +
				"e\",\"doc\":\"The name of the questionnaire.\",\"type\":\"string\"},{\"name\":\"observervati" +
				"onTypeId\",\"doc\":\"The id of the questionnaire in the OST database.\",\"type\":\"int\"}" +
				",{\"name\":\"observationTypeDescription\",\"doc\":\"The description of the questionnair" +
				"e.\",\"type\":\"string\"},{\"name\":\"description\",\"doc\":\"The description provided by th" +
				"e user at the end of the questionnaire (attachments section).\",\"type\":\"string\"}," +
				"{\"name\":\"multiplicity\",\"doc\":\"The information if this questionnaire could be ans" +
				"wered multiple times (you could expect more than one answer from single user).\"," +
				"\"type\":\"boolean\"},{\"name\":\"questions\",\"default\":null,\"type\":[\"null\",{\"type\":\"rec" +
				"ord\",\"name\":\"Question\",\"namespace\":\"eu.driver.model.core\",\"fields\":[{\"name\":\"id\"" +
				",\"doc\":\"The id of the question in OST database.\",\"type\":\"int\"},{\"name\":\"name\",\"d" +
				"oc\":\"The question.\",\"type\":\"string\"},{\"name\":\"description\",\"doc\":\"The additional" +
				" clarifications shown below the question.\",\"type\":\"string\"},{\"name\":\"answer\",\"do" +
				"c\":\"The answer marked by the user (names of radio buttons, names of checkboxes, " +
				"value of slider or text).\",\"type\":\"string\"},{\"name\":\"comment\",\"doc\":\"The comment" +
				" provided by the user below the question.\",\"type\":\"string\"},{\"name\":\"typeOfQuest" +
				"ion\",\"type\":{\"type\":\"enum\",\"name\":\"TypeOfQuestion\",\"namespace\":\"eu.driver.model." +
				"core\",\"symbols\":[\"slider\",\"checkbox\",\"radiobutton\",\"text\"]}}]},{\"type\":\"array\",\"" +
				"items\":\"Question\"}]}]}");
		/// <summary>
		/// The unique identifier of the running Trial.
		/// </summary>
		private int _trialId;
		/// <summary>
		/// The sessionId for the running Trial.
		/// </summary>
		private int _sessionId;
		/// <summary>
		/// The id of the answer in OST databased.
		/// </summary>
		private int _answerId;
		/// <summary>
		/// The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		private long _timeSendUTC;
		/// <summary>
		/// The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		private long _timeWhen;
		/// <summary>
		/// The name of the questionnaire.
		/// </summary>
		private string _observationTypeName;
		/// <summary>
		/// The id of the questionnaire in the OST database.
		/// </summary>
		private int _observervationTypeId;
		/// <summary>
		/// The description of the questionnaire.
		/// </summary>
		private string _observationTypeDescription;
		/// <summary>
		/// The description provided by the user at the end of the questionnaire (attachments section).
		/// </summary>
		private string _description;
		/// <summary>
		/// The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
		/// </summary>
		private bool _multiplicity;
		private object _questions;
		public virtual Schema Schema
		{
			get
			{
				return ObserverToolAnswer._SCHEMA;
			}
		}
		/// <summary>
		/// The unique identifier of the running Trial.
		/// </summary>
		public int trialId
		{
			get
			{
				return this._trialId;
			}
			set
			{
				this._trialId = value;
			}
		}
		/// <summary>
		/// The sessionId for the running Trial.
		/// </summary>
		public int sessionId
		{
			get
			{
				return this._sessionId;
			}
			set
			{
				this._sessionId = value;
			}
		}
		/// <summary>
		/// The id of the answer in OST databased.
		/// </summary>
		public int answerId
		{
			get
			{
				return this._answerId;
			}
			set
			{
				this._answerId = value;
			}
		}
		/// <summary>
		/// The time when questionnaire was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		public long timeSendUTC
		{
			get
			{
				return this._timeSendUTC;
			}
			set
			{
				this._timeSendUTC = value;
			}
		}
		/// <summary>
		/// The time provided by user in the questionnaire (could be simulation time) was sent as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		public long timeWhen
		{
			get
			{
				return this._timeWhen;
			}
			set
			{
				this._timeWhen = value;
			}
		}
		/// <summary>
		/// The name of the questionnaire.
		/// </summary>
		public string observationTypeName
		{
			get
			{
				return this._observationTypeName;
			}
			set
			{
				this._observationTypeName = value;
			}
		}
		/// <summary>
		/// The id of the questionnaire in the OST database.
		/// </summary>
		public int observervationTypeId
		{
			get
			{
				return this._observervationTypeId;
			}
			set
			{
				this._observervationTypeId = value;
			}
		}
		/// <summary>
		/// The description of the questionnaire.
		/// </summary>
		public string observationTypeDescription
		{
			get
			{
				return this._observationTypeDescription;
			}
			set
			{
				this._observationTypeDescription = value;
			}
		}
		/// <summary>
		/// The description provided by the user at the end of the questionnaire (attachments section).
		/// </summary>
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				this._description = value;
			}
		}
		/// <summary>
		/// The information if this questionnaire could be answered multiple times (you could expect more than one answer from single user).
		/// </summary>
		public bool multiplicity
		{
			get
			{
				return this._multiplicity;
			}
			set
			{
				this._multiplicity = value;
			}
		}
		public object questions
		{
			get
			{
				return this._questions;
			}
			set
			{
				this._questions = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.trialId;
			case 1: return this.sessionId;
			case 2: return this.answerId;
			case 3: return this.timeSendUTC;
			case 4: return this.timeWhen;
			case 5: return this.observationTypeName;
			case 6: return this.observervationTypeId;
			case 7: return this.observationTypeDescription;
			case 8: return this.description;
			case 9: return this.multiplicity;
			case 10: return this.questions;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.trialId = (System.Int32)fieldValue; break;
			case 1: this.sessionId = (System.Int32)fieldValue; break;
			case 2: this.answerId = (System.Int32)fieldValue; break;
			case 3: this.timeSendUTC = (System.Int64)fieldValue; break;
			case 4: this.timeWhen = (System.Int64)fieldValue; break;
			case 5: this.observationTypeName = (System.String)fieldValue; break;
			case 6: this.observervationTypeId = (System.Int32)fieldValue; break;
			case 7: this.observationTypeDescription = (System.String)fieldValue; break;
			case 8: this.description = (System.String)fieldValue; break;
			case 9: this.multiplicity = (System.Boolean)fieldValue; break;
			case 10: this.questions = (System.Object)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
