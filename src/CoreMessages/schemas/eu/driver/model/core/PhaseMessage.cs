// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.core
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class PhaseMessage : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""PhaseMessage"",""namespace"":""eu.driver.model.core"",""fields"":[{""name"":""id"",""doc"":""The unique ID of the message"",""type"":""string""},{""name"":""phase"",""doc"":""The current active phase."",""type"":{""type"":""enum"",""name"":""Phase"",""namespace"":""eu.driver.model.tm"",""symbols"":[""PROPER_NAME"",""INITIALIZATION"",""PREPARATION"",""PRE_INCIDENT"",""INCIDENT"",""POST_INCIDENT""]}},{""name"":""isStarting"",""doc"":""Indicating if started (true) or ended (false)."",""type"":""boolean""},{""name"":""alternativeName"",""doc"":""An optional alternative name for the phase. Linked to PROPER_NAME."",""default"":null,""type"":[""null"",""string""]}]}");
		/// <summary>
		/// The unique ID of the message
		/// </summary>
		private string _id;
		/// <summary>
		/// The current active phase.
		/// </summary>
		private eu.driver.model.tm.Phase _phase;
		/// <summary>
		/// Indicating if started (true) or ended (false).
		/// </summary>
		private bool _isStarting;
		/// <summary>
		/// An optional alternative name for the phase. Linked to PROPER_NAME.
		/// </summary>
		private string _alternativeName;
		public virtual Schema Schema
		{
			get
			{
				return PhaseMessage._SCHEMA;
			}
		}
		/// <summary>
		/// The unique ID of the message
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// The current active phase.
		/// </summary>
		public eu.driver.model.tm.Phase phase
		{
			get
			{
				return this._phase;
			}
			set
			{
				this._phase = value;
			}
		}
		/// <summary>
		/// Indicating if started (true) or ended (false).
		/// </summary>
		public bool isStarting
		{
			get
			{
				return this._isStarting;
			}
			set
			{
				this._isStarting = value;
			}
		}
		/// <summary>
		/// An optional alternative name for the phase. Linked to PROPER_NAME.
		/// </summary>
		public string alternativeName
		{
			get
			{
				return this._alternativeName;
			}
			set
			{
				this._alternativeName = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.phase;
			case 2: return this.isStarting;
			case 3: return this.alternativeName;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.phase = (eu.driver.model.tm.Phase)fieldValue; break;
			case 2: this.isStarting = (System.Boolean)fieldValue; break;
			case 3: this.alternativeName = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
