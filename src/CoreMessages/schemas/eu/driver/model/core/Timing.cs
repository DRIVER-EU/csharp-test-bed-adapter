// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.core
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Timing : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""Timing"",""namespace"":""eu.driver.model.core"",""fields"":[{""name"":""id"",""doc"":""sequence ID"",""type"":""long""},{""name"":""updatedAt"",""doc"":""The date and time the trialTime was updated as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC."",""type"":""long"",""logicalType"":""timestamp-millis""},{""name"":""trialTime"",""doc"":""The fictive date and time of the simulation / trial as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC."",""type"":""long"",""logicalType"":""timestamp-millis""},{""name"":""timeElapsed"",""doc"":""The number of milliseconds from the start of the trial."",""type"":""long"",""logicalType"":""timestamp-millis""},{""name"":""trialTimeSpeed"",""doc"":""Positive number, indicating how fast the simulation / trial time moves with respect to the actual time. A value of 0 means a pause, 1 is as fast as real-time."",""type"":""float""}]}");
		/// <summary>
		/// sequence ID
		/// </summary>
		private long _id;
		/// <summary>
		/// The date and time the trialTime was updated as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		private long _updatedAt;
		/// <summary>
		/// The fictive date and time of the simulation / trial as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		private long _trialTime;
		/// <summary>
		/// The number of milliseconds from the start of the trial.
		/// </summary>
		private long _timeElapsed;
		/// <summary>
		/// Positive number, indicating how fast the simulation / trial time moves with respect to the actual time. A value of 0 means a pause, 1 is as fast as real-time.
		/// </summary>
		private float _trialTimeSpeed;
		public virtual Schema Schema
		{
			get
			{
				return Timing._SCHEMA;
			}
		}
		/// <summary>
		/// sequence ID
		/// </summary>
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// The date and time the trialTime was updated as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		public long updatedAt
		{
			get
			{
				return this._updatedAt;
			}
			set
			{
				this._updatedAt = value;
			}
		}
		/// <summary>
		/// The fictive date and time of the simulation / trial as the number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
		/// </summary>
		public long trialTime
		{
			get
			{
				return this._trialTime;
			}
			set
			{
				this._trialTime = value;
			}
		}
		/// <summary>
		/// The number of milliseconds from the start of the trial.
		/// </summary>
		public long timeElapsed
		{
			get
			{
				return this._timeElapsed;
			}
			set
			{
				this._timeElapsed = value;
			}
		}
		/// <summary>
		/// Positive number, indicating how fast the simulation / trial time moves with respect to the actual time. A value of 0 means a pause, 1 is as fast as real-time.
		/// </summary>
		public float trialTimeSpeed
		{
			get
			{
				return this._trialTimeSpeed;
			}
			set
			{
				this._trialTimeSpeed = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.updatedAt;
			case 2: return this.trialTime;
			case 3: return this.timeElapsed;
			case 4: return this.trialTimeSpeed;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.Int64)fieldValue; break;
			case 1: this.updatedAt = (System.Int64)fieldValue; break;
			case 2: this.trialTime = (System.Int64)fieldValue; break;
			case 3: this.timeElapsed = (System.Int64)fieldValue; break;
			case 4: this.trialTimeSpeed = (System.Single)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
