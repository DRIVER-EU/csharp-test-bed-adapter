// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.mlp
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class CircularArcArea : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""CircularArcArea"",""namespace"":""eu.driver.model.mlp"",""fields"":[{""name"":""coord"",""type"":{""type"":""record"",""name"":""Coord"",""namespace"":""eu.driver.model.mlp"",""fields"":[{""name"":""X"",""doc"":""The first coordinate in a coordinate system (30 27 45.3N)"",""type"":""string""},{""name"":""Y"",""doc"":""Second ordinate in a coordinate.system (45 25 52.9E). This is optional if it is a linear coordinate system."",""default"":null,""type"":[""null"",""double""]},{""name"":""Z"",""doc"":""Third ordinate in a coordinate system which has at least three ordinates."",""default"":null,""type"":[""null"",""double""]}]}},{""name"":""inRadius"",""type"":""double""},{""name"":""outRadius"",""type"":""double""},{""name"":""startAngle"",""type"":""double""},{""name"":""stopAngle"",""type"":""double""},{""name"":""angularUnit"",""default"":null,""type"":[""null"",{""type"":""enum"",""name"":""AngularUnit"",""namespace"":""eu.driver.model.mlp"",""symbols"":[""Degrees"",""Radians""]}]},{""name"":""distanceUnit"",""default"":null,""type"":[""null"",{""type"":""enum"",""name"":""DistanceUnit"",""namespace"":""eu.driver.model.mlp"",""symbols"":[""meter""]}]},{""name"":""attr_gid"",""default"":null,""type"":[""null"",""string""]},{""name"":""attr_srsName"",""default"":null,""type"":[""null"",""string""]}]}");
		private eu.driver.model.mlp.Coord _coord;
		private double _inRadius;
		private double _outRadius;
		private double _startAngle;
		private double _stopAngle;
		private System.Nullable<eu.driver.model.mlp.AngularUnit> _angularUnit;
		private System.Nullable<eu.driver.model.mlp.DistanceUnit> _distanceUnit;
		private string _attr_gid;
		private string _attr_srsName;
		public virtual Schema Schema
		{
			get
			{
				return CircularArcArea._SCHEMA;
			}
		}
		public eu.driver.model.mlp.Coord coord
		{
			get
			{
				return this._coord;
			}
			set
			{
				this._coord = value;
			}
		}
		public double inRadius
		{
			get
			{
				return this._inRadius;
			}
			set
			{
				this._inRadius = value;
			}
		}
		public double outRadius
		{
			get
			{
				return this._outRadius;
			}
			set
			{
				this._outRadius = value;
			}
		}
		public double startAngle
		{
			get
			{
				return this._startAngle;
			}
			set
			{
				this._startAngle = value;
			}
		}
		public double stopAngle
		{
			get
			{
				return this._stopAngle;
			}
			set
			{
				this._stopAngle = value;
			}
		}
		public System.Nullable<eu.driver.model.mlp.AngularUnit> angularUnit
		{
			get
			{
				return this._angularUnit;
			}
			set
			{
				this._angularUnit = value;
			}
		}
		public System.Nullable<eu.driver.model.mlp.DistanceUnit> distanceUnit
		{
			get
			{
				return this._distanceUnit;
			}
			set
			{
				this._distanceUnit = value;
			}
		}
		public string attr_gid
		{
			get
			{
				return this._attr_gid;
			}
			set
			{
				this._attr_gid = value;
			}
		}
		public string attr_srsName
		{
			get
			{
				return this._attr_srsName;
			}
			set
			{
				this._attr_srsName = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.coord;
			case 1: return this.inRadius;
			case 2: return this.outRadius;
			case 3: return this.startAngle;
			case 4: return this.stopAngle;
			case 5: return this.angularUnit;
			case 6: return this.distanceUnit;
			case 7: return this.attr_gid;
			case 8: return this.attr_srsName;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.coord = (eu.driver.model.mlp.Coord)fieldValue; break;
			case 1: this.inRadius = (System.Double)fieldValue; break;
			case 2: this.outRadius = (System.Double)fieldValue; break;
			case 3: this.startAngle = (System.Double)fieldValue; break;
			case 4: this.stopAngle = (System.Double)fieldValue; break;
			case 5: this.angularUnit = fieldValue == null ? (System.Nullable<eu.driver.model.mlp.AngularUnit>)null : (eu.driver.model.mlp.AngularUnit)fieldValue; break;
			case 6: this.distanceUnit = fieldValue == null ? (System.Nullable<eu.driver.model.mlp.DistanceUnit>)null : (eu.driver.model.mlp.DistanceUnit)fieldValue; break;
			case 7: this.attr_gid = (System.String)fieldValue; break;
			case 8: this.attr_srsName = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
