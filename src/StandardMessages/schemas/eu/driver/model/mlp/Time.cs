// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.mlp
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Time : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""Time"",""namespace"":""eu.driver.model.mlp"",""fields"":[{""name"":""time"",""doc"":""UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss"",""type"":""long"",""logicalType"":""timestamp-millis""},{""name"":""attr_utc_off"",""doc"":""Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich."",""default"":""0000"",""type"":""string""}]}");
		/// <summary>
		/// UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
		/// </summary>
		private long _time;
		/// <summary>
		/// Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
		/// </summary>
		private string _attr_utc_off;
		public virtual Schema Schema
		{
			get
			{
				return Time._SCHEMA;
			}
		}
		/// <summary>
		/// UTC Timestamp in milliseconds. Original MLP uses String: yyyyMMddhhmmss
		/// </summary>
		public long time
		{
			get
			{
				return this._time;
			}
			set
			{
				this._time = value;
			}
		}
		/// <summary>
		/// Specifies the UTC [UTC] offset in hours and minutes. Positive values indicate time zones east of Greenwich.
		/// </summary>
		public string attr_utc_off
		{
			get
			{
				return this._attr_utc_off;
			}
			set
			{
				this._attr_utc_off = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.time;
			case 1: return this.attr_utc_off;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.time = (System.Int64)fieldValue; break;
			case 1: this.attr_utc_off = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
