// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.geojson.sim
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class SimulatedEntityProperties : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""SimulatedEntityProperties"",""namespace"":""eu.driver.model.geojson.sim"",""fields"":[{""name"":""guid"",""doc"":""globally unique identifier for this entity"",""type"":""string""},{""name"":""name"",""doc"":""name of this entity"",""type"":""string""},{""name"":""speed"",""doc"":""speed of the entity in m/s"",""default"":null,""type"":[""null"",""double""]},{""name"":""type"",""type"":{""type"":""enum"",""name"":""TypeEnum"",""namespace"":""eu.driver.model.geojson.sim"",""symbols"":[""OBJECT"",""PERSON"",""CAR"",""VAN"",""TRUCK"",""BOAT"",""PLANE"",""HELICOPTER"",""MOTORCYCLE"",""DRONE"",""UNIT"",""STATION"",""UNITGROUP"",""UNKNOWN""]}},{""name"":""label"",""doc"":""Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military."",""type"":""string""},{""name"":""subEntities"",""doc"":""Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids."",""default"":null,""type"":[""null"",{""type"":""array"",""items"":""string""}]}]}");
		/// <summary>
		/// globally unique identifier for this entity
		/// </summary>
		private string _guid;
		/// <summary>
		/// name of this entity
		/// </summary>
		private string _name;
		/// <summary>
		/// speed of the entity in m/s
		/// </summary>
		private System.Nullable<double> _speed;
		private eu.driver.model.geojson.sim.TypeEnum _type;
		/// <summary>
		/// Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
		/// </summary>
		private string _label;
		/// <summary>
		/// Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
		/// </summary>
		private IList<System.String> _subEntities;
		public virtual Schema Schema
		{
			get
			{
				return SimulatedEntityProperties._SCHEMA;
			}
		}
		/// <summary>
		/// globally unique identifier for this entity
		/// </summary>
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				this._guid = value;
			}
		}
		/// <summary>
		/// name of this entity
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// speed of the entity in m/s
		/// </summary>
		public System.Nullable<double> speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				this._speed = value;
			}
		}
		public eu.driver.model.geojson.sim.TypeEnum type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Label that describes the domain of the entity. E.g. Police, Medical, Fire or Military.
		/// </summary>
		public string label
		{
			get
			{
				return this._label;
			}
			set
			{
				this._label = value;
			}
		}
		/// <summary>
		/// Entities contained by this entity. Only used for Units, Stations and Unit Groups. Array of strings consists of guids.
		/// </summary>
		public IList<System.String> subEntities
		{
			get
			{
				return this._subEntities;
			}
			set
			{
				this._subEntities = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.guid;
			case 1: return this.name;
			case 2: return this.speed;
			case 3: return this.type;
			case 4: return this.label;
			case 5: return this.subEntities;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.guid = (System.String)fieldValue; break;
			case 1: this.name = (System.String)fieldValue; break;
			case 2: this.speed = (System.Nullable<double>)fieldValue; break;
			case 3: this.type = (eu.driver.model.geojson.sim.TypeEnum)fieldValue; break;
			case 4: this.label = (System.String)fieldValue; break;
			case 5: this.subEntities = (IList<System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
