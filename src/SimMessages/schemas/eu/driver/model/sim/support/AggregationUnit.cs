// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggregationUnit : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggregationUnit\",\"namespace\":\"eu.driver.model.sim.suppor" +
				"t\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the aggregation update\",\"t" +
				"ype\":\"string\"},{\"name\":\"syncMap\",\"doc\":\"Map containing key-value pairs, all with" +
				" unique keys: key – unique identifier of the unit; value – specific aggregated u" +
				"nit properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"AggrUnit\"" +
				",\"namespace\":\"eu.driver.model.sim.support.aggr\",\"fields\":[{\"name\":\"items\",\"doc\":" +
				"\"Optional list of items that belong to the unit\",\"default\":null,\"type\":[\"null\",{" +
				"\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"eu.driver.mod" +
				"el.sim.entity\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the item\",\"typ" +
				"e\":\"string\"},{\"name\":\"location\",\"doc\":\"Location of the item\",\"type\":{\"type\":\"rec" +
				"ord\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"nam" +
				"e\":\"latitude\",\"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 is the e" +
				"quator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging " +
				"from (-180, 180] where 0 is the Prime Meridian (line going through the geographi" +
				"c north, Greenwich, and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitud" +
				"e\",\"doc\":\"Optional in meters, where 0 is the surface of the WGS84-based ellipsoi" +
				"d\",\"default\":null,\"type\":[\"null\",\"double\"]}]}},{\"name\":\"name\",\"doc\":\"Optional na" +
				"me of the item\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"doc\":\"O" +
				"ptional type of the item\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"owne" +
				"r\",\"doc\":\"Optional unique identifier of the connected application owning the ite" +
				"m\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\",\"doc\":\"Optional " +
				"UNIX Epoch time in milliseconds marking the time the update was performed\",\"defa" +
				"ult\":null,\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"tags" +
				"\",\"doc\":\"Optional map containing item specific information: key – unique name of" +
				" the specific property; value – value of that property\",\"default\":null,\"type\":[\"" +
				"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"orientation\",\"doc\":\"Optional o" +
				"rientation of the item\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"O" +
				"rientation\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"d" +
				"oc\":\"In decimal degrees, ranging from [0, 360) where 0 is pointing towards the g" +
				"eographic north. The yaw value is applied in a clockwise rotation over the item’" +
				"s heading/yaw-axis. A yaw value of 90 makes the item face east, while a yaw of 2" +
				"70 makes it face west\",\"type\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degree" +
				"s, ranging from [-90, 90] where 0 is perpendicular to the line between the item’" +
				"s location and the centre of the WGS84-based ellipsoid. The pitch value is appli" +
				"ed in a counter-clockwise rotation over the item’s pitch-axis. A pitch value of " +
				"45 makes the item face 45 degrees upwards, while a pitch of -20 makes it face 20" +
				" degrees downwards\",\"type\":\"double\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, r" +
				"anging from (-180, 180] where 0 is perpendicular to the line between the item’s " +
				"location and the centre of the WGS84-based ellipsoid. The roll value is applied " +
				"in a clockwise rotation over the item’s roll/bank-axis. A roll value of 45 makes" +
				" the item roll 45 degrees to the right, while a roll of -50 makes it roll 50 deg" +
				"rees to the left\",\"type\":\"double\"}]}]},{\"name\":\"velocity\",\"doc\":\"Optional veloci" +
				"ty of the item\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Velocity\"" +
				",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In dec" +
				"imal degrees, ranging from [0, 360) where 0 is pointing towards the geographic n" +
				"orth. The yaw value is applied in a clockwise rotation over the item’s heading/y" +
				"aw-axis. A yaw value of 90 makes the item face east, while a yaw of 270 makes it" +
				" face west\",\"type\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging " +
				"from [-90, 90] where 0 is perpendicular to the line between the item’s location " +
				"and the centre of the WGS84-based ellipsoid. The pitch value is applied in a cou" +
				"nter-clockwise rotation over the item’s pitch-axis. A pitch value of 45 makes th" +
				"e item face 45 degrees upwards, while a pitch of -20 makes it face 20 degrees do" +
				"wnwards\",\"type\":\"double\"},{\"name\":\"magnitude\",\"doc\":\"In meter per seconds, rangi" +
				"ng from [0, infinity) where 0 is standing still relative to the earth’s rotation" +
				"\",\"type\":\"double\"}]}]}],\"_comment\":\"TODO: Include type property into tags? Do we" +
				" want to include children (items that belong to this main time) to facilitate it" +
				"ems inside items?\"}}]},{\"name\":\"name\",\"doc\":\"Optional name of the unit\",\"default" +
				"\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"tags\",\"doc\":\"Optional map containing u" +
				"nit specific information: key – unique name of the specific property; value – va" +
				"lue of that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"stri" +
				"ng\"}]},{\"name\":\"location\",\"doc\":\"Optional location of the unit\",\"default\":null,\"" +
				"type\":[\"null\",{\"type\":\"record\",\"name\":\"UnitLocation\",\"namespace\":\"eu.driver.mode" +
				"l.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, ranging f" +
				"rom [-90, 90] where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\"" +
				":\"In decimal degrees, ranging from (-180, 180] where 0 is the Prime Meridian (li" +
				"ne going through the geographic north, Greenwich, and the geographic south)\",\"ty" +
				"pe\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the surfa" +
				"ce of the WGS84-based ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}]}]}}" +
				"},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds marking th" +
				"e time the aggregated update was performed\",\"default\":null,\"type\":[\"null\",\"long\"" +
				"],\"logicalType\":\"timestamp-millis\"}],\"_comment\":\"\"}");
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		private string _id;
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the unit; value – specific aggregated unit properties
		/// </summary>
		private IDictionary<string,eu.driver.model.sim.support.aggr.AggrUnit> _syncMap;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		public virtual Schema Schema
		{
			get
			{
				return AggregationUnit._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the unit; value – specific aggregated unit properties
		/// </summary>
		public IDictionary<string,eu.driver.model.sim.support.aggr.AggrUnit> syncMap
		{
			get
			{
				return this._syncMap;
			}
			set
			{
				this._syncMap = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.syncMap;
			case 2: return this.timestamp;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.syncMap = (IDictionary<string,eu.driver.model.sim.support.aggr.AggrUnit>)fieldValue; break;
			case 2: this.timestamp = (System.Nullable<long>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
