// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggregationItem : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggregationItem\",\"namespace\":\"eu.driver.model.sim.suppor" +
				"t\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the aggregation update\",\"t" +
				"ype\":\"string\"},{\"name\":\"syncMap\",\"doc\":\"Map containing key-value pairs, all with" +
				" unique keys: key – unique identifier of the item; value – specific aggregated i" +
				"tem properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"AggrItem\"" +
				",\"namespace\":\"eu.driver.model.sim.support.aggr\",\"fields\":[{\"name\":\"name\",\"doc\":\"" +
				"Optional name of the item\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"tag" +
				"s\",\"doc\":\"Optional map containing item specific information: key – unique name o" +
				"f the specific property; value – value of that property\",\"default\":null,\"type\":[" +
				"\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"location\",\"doc\":\"Optional loc" +
				"ation of the item\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Locati" +
				"on\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\"" +
				":\"In decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"dou" +
				"ble\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] wh" +
				"ere 0 is the Prime Meridian (line going through the geographic north, Greenwich," +
				" and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional " +
				"in meters, where 0 is the surface of the WGS84-based ellipsoid\",\"default\":null,\"" +
				"type\":[\"null\",\"double\"]}]}]},{\"name\":\"orientation\",\"doc\":\"Optional orientation o" +
				"f the item\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Orientation\"," +
				"\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In deci" +
				"mal degrees, ranging from [0, 360) where 0 is pointing towards the geographic no" +
				"rth. The yaw value is applied in a clockwise rotation over the item’s heading/ya" +
				"w-axis. A yaw value of 90 makes the item face east, while a yaw of 270 makes it " +
				"face west\",\"type\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging f" +
				"rom [-90, 90] where 0 is perpendicular to the line between the item’s location a" +
				"nd the centre of the WGS84-based ellipsoid. The pitch value is applied in a coun" +
				"ter-clockwise rotation over the item’s pitch-axis. A pitch value of 45 makes the" +
				" item face 45 degrees upwards, while a pitch of -20 makes it face 20 degrees dow" +
				"nwards\",\"type\":\"double\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, ranging from " +
				"(-180, 180] where 0 is perpendicular to the line between the item’s location and" +
				" the centre of the WGS84-based ellipsoid. The roll value is applied in a clockwi" +
				"se rotation over the item’s roll/bank-axis. A roll value of 45 makes the item ro" +
				"ll 45 degrees to the right, while a roll of -50 makes it roll 50 degrees to the " +
				"left\",\"type\":\"double\"}]}]},{\"name\":\"velocity\",\"doc\":\"Optional velocity of the it" +
				"em\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\"" +
				":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees" +
				", ranging from [0, 360) where 0 is pointing towards the geographic north. The ya" +
				"w value is applied in a clockwise rotation over the item’s heading/yaw-axis. A y" +
				"aw value of 90 makes the item face east, while a yaw of 270 makes it face west\"," +
				"\"type\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 9" +
				"0] where 0 is perpendicular to the line between the item’s location and the cent" +
				"re of the WGS84-based ellipsoid. The pitch value is applied in a counter-clockwi" +
				"se rotation over the item’s pitch-axis. A pitch value of 45 makes the item face " +
				"45 degrees upwards, while a pitch of -20 makes it face 20 degrees downwards\",\"ty" +
				"pe\":\"double\"},{\"name\":\"magnitude\",\"doc\":\"In meter per seconds, ranging from [0, " +
				"infinity) where 0 is standing still relative to the earth’s rotation\",\"type\":\"do" +
				"uble\"}]}]}]}}},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in millisecon" +
				"ds marking the time the aggregated update was performed\",\"default\":null,\"type\":[" +
				"\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}],\"_comment\":\"\"}");
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		private string _id;
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the item; value – specific aggregated item properties
		/// </summary>
		private IDictionary<string,eu.driver.model.sim.support.aggr.AggrItem> _syncMap;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		public virtual Schema Schema
		{
			get
			{
				return AggregationItem._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the item; value – specific aggregated item properties
		/// </summary>
		public IDictionary<string,eu.driver.model.sim.support.aggr.AggrItem> syncMap
		{
			get
			{
				return this._syncMap;
			}
			set
			{
				this._syncMap = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.syncMap;
			case 2: return this.timestamp;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.syncMap = (IDictionary<string,eu.driver.model.sim.support.aggr.AggrItem>)fieldValue; break;
			case 2: this.timestamp = (System.Nullable<long>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
