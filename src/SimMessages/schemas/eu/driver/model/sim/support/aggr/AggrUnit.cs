// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support.aggr
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggrUnit : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggrUnit\",\"namespace\":\"eu.driver.model.sim.support.aggr\"" +
				",\"fields\":[{\"name\":\"items\",\"doc\":\"Optional list of items that belong to the unit" +
				"\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":" +
				"\"Item\",\"namespace\":\"eu.driver.model.sim.entity\",\"fields\":[{\"name\":\"id\",\"doc\":\"Un" +
				"ique identifier of the item\",\"type\":\"string\"},{\"name\":\"location\",\"doc\":\"Location" +
				" of the item\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.m" +
				"odel.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, rangin" +
				"g from [-90, 90] where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"d" +
				"oc\":\"In decimal degrees, ranging from (-180, 180] where 0 is the Prime Meridian " +
				"(line going through the geographic north, Greenwich, and the geographic south)\"," +
				"\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the su" +
				"rface of the WGS84-based ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}}," +
				"{\"name\":\"name\",\"doc\":\"Optional name of the item\",\"default\":null,\"type\":[\"null\",\"" +
				"string\"]},{\"name\":\"type\",\"doc\":\"Optional type of the item\",\"default\":null,\"type\"" +
				":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional unique identifier of the con" +
				"nected application owning the item\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"n" +
				"ame\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds marking the tim" +
				"e the update was performed\",\"default\":null,\"type\":[\"null\",\"long\"],\"logicalType\":" +
				"\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional map containing item specific " +
				"information: key – unique name of the specific property; value – value of that p" +
				"roperty\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name" +
				"\":\"orientation\",\"doc\":\"Optional orientation of the item\",\"default\":null,\"type\":[" +
				"\"null\",{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"eu.driver.model.sim.su" +
				"pport\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, ranging from [0, 360) " +
				"where 0 is pointing towards the geographic north. The yaw value is applied in a " +
				"clockwise rotation over the item’s heading/yaw-axis. A yaw value of 90 makes the" +
				" item face east, while a yaw of 270 makes it face west\",\"type\":\"double\"},{\"name\"" +
				":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 is perpendicu" +
				"lar to the line between the item’s location and the centre of the WGS84-based el" +
				"lipsoid. The pitch value is applied in a counter-clockwise rotation over the ite" +
				"m’s pitch-axis. A pitch value of 45 makes the item face 45 degrees upwards, whil" +
				"e a pitch of -20 makes it face 20 degrees downwards\",\"type\":\"double\"},{\"name\":\"r" +
				"oll\",\"doc\":\"In decimal degrees, ranging from (-180, 180] where 0 is perpendicula" +
				"r to the line between the item’s location and the centre of the WGS84-based elli" +
				"psoid. The roll value is applied in a clockwise rotation over the item’s roll/ba" +
				"nk-axis. A roll value of 45 makes the item roll 45 degrees to the right, while a" +
				" roll of -50 makes it roll 50 degrees to the left\",\"type\":\"double\"}]}]},{\"name\":" +
				"\"velocity\",\"doc\":\"Optional velocity of the item\",\"default\":null,\"type\":[\"null\",{" +
				"\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"eu.driver.model.sim.support\",\"fie" +
				"lds\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, ranging from [0, 360) where 0 is " +
				"pointing towards the geographic north. The yaw value is applied in a clockwise r" +
				"otation over the item’s heading/yaw-axis. A yaw value of 90 makes the item face " +
				"east, while a yaw of 270 makes it face west\",\"type\":\"double\"},{\"name\":\"pitch\",\"d" +
				"oc\":\"In decimal degrees, ranging from [-90, 90] where 0 is perpendicular to the " +
				"line between the item’s location and the centre of the WGS84-based ellipsoid. Th" +
				"e pitch value is applied in a counter-clockwise rotation over the item’s pitch-a" +
				"xis. A pitch value of 45 makes the item face 45 degrees upwards, while a pitch o" +
				"f -20 makes it face 20 degrees downwards\",\"type\":\"double\"},{\"name\":\"magnitude\",\"" +
				"doc\":\"In meter per seconds, ranging from [0, infinity) where 0 is standing still" +
				" relative to the earth’s rotation\",\"type\":\"double\"}]}]}],\"_comment\":\"TODO: Inclu" +
				"de type property into tags? Do we want to include children (items that belong to" +
				" this main time) to facilitate items inside items?\"}}]},{\"name\":\"name\",\"doc\":\"Op" +
				"tional name of the unit\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"tags\"" +
				",\"doc\":\"Optional map containing unit specific information: key – unique name of " +
				"the specific property; value – value of that property\",\"default\":null,\"type\":[\"n" +
				"ull\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"location\",\"doc\":\"Optional locat" +
				"ion of the unit\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"UnitLoca" +
				"tion\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"do" +
				"c\":\"In decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"d" +
				"ouble\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] " +
				"where 0 is the Prime Meridian (line going through the geographic north, Greenwic" +
				"h, and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optiona" +
				"l in meters, where 0 is the surface of the WGS84-based ellipsoid\",\"default\":null" +
				",\"type\":[\"null\",\"double\"]}]}]}]}");
		/// <summary>
		/// Optional list of items that belong to the unit
		/// </summary>
		private IList<eu.driver.model.sim.entity.Item> _items;
		/// <summary>
		/// Optional name of the unit
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional map containing unit specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional location of the unit
		/// </summary>
		private eu.driver.model.sim.support.UnitLocation _location;
		public virtual Schema Schema
		{
			get
			{
				return AggrUnit._SCHEMA;
			}
		}
		/// <summary>
		/// Optional list of items that belong to the unit
		/// </summary>
		public IList<eu.driver.model.sim.entity.Item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items = value;
			}
		}
		/// <summary>
		/// Optional name of the unit
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional map containing unit specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional location of the unit
		/// </summary>
		public eu.driver.model.sim.support.UnitLocation location
		{
			get
			{
				return this._location;
			}
			set
			{
				this._location = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.items;
			case 1: return this.name;
			case 2: return this.tags;
			case 3: return this.location;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.items = (IList<eu.driver.model.sim.entity.Item>)fieldValue; break;
			case 1: this.name = (System.String)fieldValue; break;
			case 2: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 3: this.location = (eu.driver.model.sim.support.UnitLocation)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
