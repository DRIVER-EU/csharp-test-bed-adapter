// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support.aggr
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggrPost : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggrPost\",\"namespace\":\"eu.driver.model.sim.support.aggr\"" +
				",\"fields\":[{\"name\":\"body\",\"doc\":\"Optional body text of the post\",\"default\":null," +
				"\"type\":[\"null\",\"string\"]},{\"name\":\"header\",\"doc\":\"Optional header information of" +
				" the post\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Header\",\"names" +
				"pace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"from\",\"doc\":\"Sender of th" +
				"e post\",\"type\":\"string\"},{\"name\":\"date\",\"doc\":\"UNIX Epoch time in milliseconds m" +
				"arking the time the post was published/updated\",\"type\":\"long\",\"logicalType\":\"tim" +
				"estamp-millis\"},{\"name\":\"to\",\"doc\":\"Optional list of recipients of the post\",\"de" +
				"fault\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"cc\",\"doc" +
				"\":\"Optional list of recipients in carbon copy of the post\",\"default\":null,\"type\"" +
				":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"bcc\",\"doc\":\"Optional list " +
				"of recipients in blind carbon copy of the post\",\"default\":null,\"type\":[\"null\",{\"" +
				"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"subject\",\"doc\":\"Optional Subject of t" +
				"he post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"intro\",\"doc\":\"Optiona" +
				"l introductory text of the post\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name" +
				"\":\"attachments\",\"doc\":\"Optional list of (references to) attachments inside the p" +
				"ost\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"" +
				"location\",\"doc\":\"optional location the post is attached to\",\"default\":null,\"type" +
				"\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.su" +
				"pport\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, ranging from [-90" +
				", 90] where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"In dec" +
				"imal degrees, ranging from (-180, 180] where 0 is the Prime Meridian (line going" +
				" through the geographic north, Greenwich, and the geographic south)\",\"type\":\"dou" +
				"ble\"},{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the surface of th" +
				"e WGS84-based ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}]}]}]},{\"name" +
				"\":\"name\",\"doc\":\"Optional name of the post\",\"default\":null,\"type\":[\"null\",\"string" +
				"\"]},{\"name\":\"tags\",\"doc\":\"Optional map containing post specific information: key" +
				" – unique name of the specific property; value – value of that property\",\"defaul" +
				"t\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"mediumType\",\"" +
				"doc\":\"Optional type of the medium the post is published on\",\"default\":null,\"type" +
				"\":[\"null\",\"string\"]},{\"name\":\"mediumName\",\"doc\":\"Optional name of the medium the" +
				" post is published on\",\"default\":null,\"type\":[\"null\",\"string\"]}]}");
		/// <summary>
		/// Optional body text of the post
		/// </summary>
		private string _body;
		/// <summary>
		/// Optional header information of the post
		/// </summary>
		private eu.driver.model.sim.support.Header _header;
		/// <summary>
		/// Optional name of the post
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional map containing post specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional type of the medium the post is published on
		/// </summary>
		private string _mediumType;
		/// <summary>
		/// Optional name of the medium the post is published on
		/// </summary>
		private string _mediumName;
		public virtual Schema Schema
		{
			get
			{
				return AggrPost._SCHEMA;
			}
		}
		/// <summary>
		/// Optional body text of the post
		/// </summary>
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				this._body = value;
			}
		}
		/// <summary>
		/// Optional header information of the post
		/// </summary>
		public eu.driver.model.sim.support.Header header
		{
			get
			{
				return this._header;
			}
			set
			{
				this._header = value;
			}
		}
		/// <summary>
		/// Optional name of the post
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional map containing post specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional type of the medium the post is published on
		/// </summary>
		public string mediumType
		{
			get
			{
				return this._mediumType;
			}
			set
			{
				this._mediumType = value;
			}
		}
		/// <summary>
		/// Optional name of the medium the post is published on
		/// </summary>
		public string mediumName
		{
			get
			{
				return this._mediumName;
			}
			set
			{
				this._mediumName = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.body;
			case 1: return this.header;
			case 2: return this.name;
			case 3: return this.tags;
			case 4: return this.mediumType;
			case 5: return this.mediumName;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.body = (System.String)fieldValue; break;
			case 1: this.header = (eu.driver.model.sim.support.Header)fieldValue; break;
			case 2: this.name = (System.String)fieldValue; break;
			case 3: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 4: this.mediumType = (System.String)fieldValue; break;
			case 5: this.mediumName = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
