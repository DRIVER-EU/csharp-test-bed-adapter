// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.support
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class AggregationLine : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"AggregationLine\",\"namespace\":\"eu.driver.model.sim.suppor" +
				"t\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the aggregation update\",\"t" +
				"ype\":\"string\"},{\"name\":\"syncMap\",\"doc\":\"Map containing key-value pairs, all with" +
				" unique keys: key – unique identifier of the line; value – specific aggregated l" +
				"ine properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"AggrLine\"" +
				",\"namespace\":\"eu.driver.model.sim.support.aggr\",\"fields\":[{\"name\":\"points\",\"doc\"" +
				":\"Optional list of locations, creating an edge between every consecutive locatio" +
				"n in the list\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"re" +
				"cord\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"na" +
				"me\":\"latitude\",\"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 is the " +
				"equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging" +
				" from (-180, 180] where 0 is the Prime Meridian (line going through the geograph" +
				"ic north, Greenwich, and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitu" +
				"de\",\"doc\":\"Optional in meters, where 0 is the surface of the WGS84-based ellipso" +
				"id\",\"default\":null,\"type\":[\"null\",\"double\"]}]}}]},{\"name\":\"name\",\"doc\":\"Optional" +
				" name of the line\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"tags\",\"doc\"" +
				":\"Optional map containing line specific information: key – unique name of the sp" +
				"ecific property; value – value of that property\",\"default\":null,\"type\":[\"null\",{" +
				"\"type\":\"map\",\"values\":\"string\"}]}]}}},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX E" +
				"poch time in milliseconds marking the time the aggregated update was performed\"," +
				"\"default\":null,\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}],\"_comme" +
				"nt\":\"\"}");
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		private string _id;
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the line; value – specific aggregated line properties
		/// </summary>
		private IDictionary<string,eu.driver.model.sim.support.aggr.AggrLine> _syncMap;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		public virtual Schema Schema
		{
			get
			{
				return AggregationLine._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the aggregation update
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Map containing key-value pairs, all with unique keys: key – unique identifier of the line; value – specific aggregated line properties
		/// </summary>
		public IDictionary<string,eu.driver.model.sim.support.aggr.AggrLine> syncMap
		{
			get
			{
				return this._syncMap;
			}
			set
			{
				this._syncMap = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the aggregated update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.syncMap;
			case 2: return this.timestamp;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.syncMap = (IDictionary<string,eu.driver.model.sim.support.aggr.AggrLine>)fieldValue; break;
			case 2: this.timestamp = (System.Nullable<long>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
