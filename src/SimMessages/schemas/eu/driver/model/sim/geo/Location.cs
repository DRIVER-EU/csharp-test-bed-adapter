// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.geo
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Location : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""Location"",""namespace"":""eu.driver.model.sim.geo"",""fields"":[{""name"":""latitude"",""doc"":""Latitude in degrees (-90, 90] - 0 is equator"",""type"":""double""},{""name"":""longitude"",""doc"":""Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]"",""type"":""double""},{""name"":""altitude"",""doc"":""Altitude in meters - 0 is surface of WGS84-based ellipsoid"",""default"":null,""type"":[""null"",""double""]}]}");
		/// <summary>
		/// Latitude in degrees (-90, 90] - 0 is equator
		/// </summary>
		private double _latitude;
		/// <summary>
		/// Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]
		/// </summary>
		private double _longitude;
		/// <summary>
		/// Altitude in meters - 0 is surface of WGS84-based ellipsoid
		/// </summary>
		private System.Nullable<double> _altitude;
		public virtual Schema Schema
		{
			get
			{
				return Location._SCHEMA;
			}
		}
		/// <summary>
		/// Latitude in degrees (-90, 90] - 0 is equator
		/// </summary>
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				this._latitude = value;
			}
		}
		/// <summary>
		/// Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]
		/// </summary>
		public double longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				this._longitude = value;
			}
		}
		/// <summary>
		/// Altitude in meters - 0 is surface of WGS84-based ellipsoid
		/// </summary>
		public System.Nullable<double> altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				this._altitude = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.latitude;
			case 1: return this.longitude;
			case 2: return this.altitude;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.latitude = (System.Double)fieldValue; break;
			case 1: this.longitude = (System.Double)fieldValue; break;
			case 2: this.altitude = (System.Nullable<double>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
