// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestUnitTransport : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""RequestUnitTransport"",""namespace"":""eu.driver.model.sim.request"",""fields"":[{""name"":""guid"",""doc"":""Globally unique identifier for this request"",""type"":""string""},{""name"":""owner"",""doc"":""Identifier of the simulator currently responsible for this request"",""type"":""string""},{""name"":""unit"",""doc"":""Globally unique identifier for the unit that should transport"",""type"":""string""},{""name"":""destination"",""doc"":""Globally unique identifier for the station that should be the destination"",""type"":""string""},{""name"":""route"",""doc"":""List of locations that describes the route towards the destination"",""default"":null,""type"":[""null"",{""type"":""array"",""items"":{""type"":""record"",""name"":""Location"",""namespace"":""eu.driver.model.sim.geo"",""fields"":[{""name"":""latitude"",""doc"":""Latitude in degrees (-90, 90] - 0 is equator"",""type"":""double""},{""name"":""longitude"",""doc"":""Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]"",""type"":""double""},{""name"":""altitude"",""doc"":""Altitude in meters - 0 is surface of WGS84-based ellipsoid"",""default"":null,""type"":[""null"",""double""]}]}}]}]}");
		/// <summary>
		/// Globally unique identifier for this request
		/// </summary>
		private string _guid;
		/// <summary>
		/// Identifier of the simulator currently responsible for this request
		/// </summary>
		private string _owner;
		/// <summary>
		/// Globally unique identifier for the unit that should transport
		/// </summary>
		private string _unit;
		/// <summary>
		/// Globally unique identifier for the station that should be the destination
		/// </summary>
		private string _destination;
		/// <summary>
		/// List of locations that describes the route towards the destination
		/// </summary>
		private IList<eu.driver.model.sim.geo.Location> _route;
		public virtual Schema Schema
		{
			get
			{
				return RequestUnitTransport._SCHEMA;
			}
		}
		/// <summary>
		/// Globally unique identifier for this request
		/// </summary>
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				this._guid = value;
			}
		}
		/// <summary>
		/// Identifier of the simulator currently responsible for this request
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Globally unique identifier for the unit that should transport
		/// </summary>
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				this._unit = value;
			}
		}
		/// <summary>
		/// Globally unique identifier for the station that should be the destination
		/// </summary>
		public string destination
		{
			get
			{
				return this._destination;
			}
			set
			{
				this._destination = value;
			}
		}
		/// <summary>
		/// List of locations that describes the route towards the destination
		/// </summary>
		public IList<eu.driver.model.sim.geo.Location> route
		{
			get
			{
				return this._route;
			}
			set
			{
				this._route = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.guid;
			case 1: return this.owner;
			case 2: return this.unit;
			case 3: return this.destination;
			case 4: return this.route;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.guid = (System.String)fieldValue; break;
			case 1: this.owner = (System.String)fieldValue; break;
			case 2: this.unit = (System.String)fieldValue; break;
			case 3: this.destination = (System.String)fieldValue; break;
			case 4: this.route = (IList<eu.driver.model.sim.geo.Location>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
