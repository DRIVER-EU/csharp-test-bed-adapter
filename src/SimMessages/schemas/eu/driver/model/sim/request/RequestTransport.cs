// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestTransport : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"RequestTransport\",\"namespace\":\"eu.driver.model.sim.reque" +
				"st\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the request\",\"type\":\"stri" +
				"ng\"},{\"name\":\"applicant\",\"doc\":\"Unique identifier of the connected application s" +
				"ending the request\",\"type\":\"string\"},{\"name\":\"entity\",\"doc\":\"Unique identifier o" +
				"f the entity the applicant requests to be transported\",\"type\":\"string\"},{\"name\":" +
				"\"destination\",\"doc\":\"Unique identifier of the entity the applicant requests the " +
				"given entity to transport to\",\"type\":\"string\"},{\"name\":\"route\",\"doc\":\"Optional l" +
				"ist of locations, creating an edge between every consecutive location in the lis" +
				"t defining the preferred route of the transport\",\"default\":null,\"type\":[\"null\",{" +
				"\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver" +
				".model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, rang" +
				"ing from [-90, 90] where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\"," +
				"\"doc\":\"In decimal degrees, ranging from (-180, 180] where 0 is the Prime Meridia" +
				"n (line going through the geographic north, Greenwich, and the geographic south)" +
				"\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the " +
				"surface of the WGS84-based ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}" +
				"}]},{\"name\":\"response\",\"doc\":\"Optional response of a connected application recei" +
				"ving this request\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Respon" +
				"se\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"code\",\"doc\":\"St" +
				"atus code that best serves the response of the respondent, possibly similar to a" +
				" HTTP response status code.\",\"type\":\"int\"},{\"name\":\"message\",\"doc\":\"Optional inf" +
				"ormation accompanying the response code\",\"default\":null,\"type\":[\"null\",\"string\"]" +
				"},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds marking th" +
				"e time the respond was given\",\"default\":null,\"type\":[\"null\",\"long\"],\"logicalType" +
				"\":\"timestamp-millis\"}]}]}],\"_comment\":\"\"}");
		/// <summary>
		/// Unique identifier of the request
		/// </summary>
		private string _id;
		/// <summary>
		/// Unique identifier of the connected application sending the request
		/// </summary>
		private string _applicant;
		/// <summary>
		/// Unique identifier of the entity the applicant requests to be transported
		/// </summary>
		private string _entity;
		/// <summary>
		/// Unique identifier of the entity the applicant requests the given entity to transport to
		/// </summary>
		private string _destination;
		/// <summary>
		/// Optional list of locations, creating an edge between every consecutive location in the list defining the preferred route of the transport
		/// </summary>
		private IList<eu.driver.model.sim.support.Location> _route;
		/// <summary>
		/// Optional response of a connected application receiving this request
		/// </summary>
		private eu.driver.model.sim.support.Response _response;
		public virtual Schema Schema
		{
			get
			{
				return RequestTransport._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the request
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Unique identifier of the connected application sending the request
		/// </summary>
		public string applicant
		{
			get
			{
				return this._applicant;
			}
			set
			{
				this._applicant = value;
			}
		}
		/// <summary>
		/// Unique identifier of the entity the applicant requests to be transported
		/// </summary>
		public string entity
		{
			get
			{
				return this._entity;
			}
			set
			{
				this._entity = value;
			}
		}
		/// <summary>
		/// Unique identifier of the entity the applicant requests the given entity to transport to
		/// </summary>
		public string destination
		{
			get
			{
				return this._destination;
			}
			set
			{
				this._destination = value;
			}
		}
		/// <summary>
		/// Optional list of locations, creating an edge between every consecutive location in the list defining the preferred route of the transport
		/// </summary>
		public IList<eu.driver.model.sim.support.Location> route
		{
			get
			{
				return this._route;
			}
			set
			{
				this._route = value;
			}
		}
		/// <summary>
		/// Optional response of a connected application receiving this request
		/// </summary>
		public eu.driver.model.sim.support.Response response
		{
			get
			{
				return this._response;
			}
			set
			{
				this._response = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.applicant;
			case 2: return this.entity;
			case 3: return this.destination;
			case 4: return this.route;
			case 5: return this.response;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.applicant = (System.String)fieldValue; break;
			case 2: this.entity = (System.String)fieldValue; break;
			case 3: this.destination = (System.String)fieldValue; break;
			case 4: this.route = (IList<eu.driver.model.sim.support.Location>)fieldValue; break;
			case 5: this.response = (eu.driver.model.sim.support.Response)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
