// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.request
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class RequestStartInject : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""RequestStartInject"",""namespace"":""eu.driver.model.sim.request"",""fields"":[{""name"":""guid"",""doc"":""Globally unique identifier for this request"",""type"":""string""},{""name"":""owner"",""doc"":""Identifier of the simulator currently responsible for this request"",""type"":""string""},{""name"":""inject"",""doc"":""Name of the inject that needs to be started"",""type"":""string""}]}");
		/// <summary>
		/// Globally unique identifier for this request
		/// </summary>
		private string _guid;
		/// <summary>
		/// Identifier of the simulator currently responsible for this request
		/// </summary>
		private string _owner;
		/// <summary>
		/// Name of the inject that needs to be started
		/// </summary>
		private string _inject;
		public virtual Schema Schema
		{
			get
			{
				return RequestStartInject._SCHEMA;
			}
		}
		/// <summary>
		/// Globally unique identifier for this request
		/// </summary>
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				this._guid = value;
			}
		}
		/// <summary>
		/// Identifier of the simulator currently responsible for this request
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Name of the inject that needs to be started
		/// </summary>
		public string inject
		{
			get
			{
				return this._inject;
			}
			set
			{
				this._inject = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.guid;
			case 1: return this.owner;
			case 2: return this.inject;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.guid = (System.String)fieldValue; break;
			case 1: this.owner = (System.String)fieldValue; break;
			case 2: this.inject = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
