// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.entity
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Unit : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"Unit\",\"namespace\":\"eu.driver.model.sim.entity\",\"fields\":" +
				"[{\"name\":\"id\",\"doc\":\"Unique identifier of the unit\",\"type\":\"string\"},{\"name\":\"it" +
				"ems\",\"doc\":\"List of items that belong to the unit\",\"type\":{\"type\":\"array\",\"items" +
				"\":{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"eu.driver.model.sim.entity\",\"field" +
				"s\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the item\",\"type\":\"string\"},{\"name\":" +
				"\"location\",\"doc\":\"Location of the item\",\"type\":{\"type\":\"record\",\"name\":\"Location" +
				"\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"" +
				"In decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"doubl" +
				"e\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] wher" +
				"e 0 is the Prime Meridian (line going through the geographic north, Greenwich, a" +
				"nd the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional in" +
				" meters, where 0 is the surface of the WGS84-based ellipsoid\",\"default\":null,\"ty" +
				"pe\":[\"null\",\"double\"]}]}},{\"name\":\"name\",\"doc\":\"Name of the item\",\"default\":null" +
				",\"type\":[\"null\",\"string\"]},{\"name\":\"itemType\",\"doc\":\"Optional type of the item\"," +
				"\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional unique " +
				"identifier of the connected application owning the item\",\"default\":null,\"type\":[" +
				"\"null\",\"string\"]},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in millise" +
				"conds marking the time the update was performed\",\"default\":null,\"type\":[\"null\",\"" +
				"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional map cont" +
				"aining item specific information: key – unique name of the specific property; va" +
				"lue – value of that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"value" +
				"s\":\"string\"}]},{\"name\":\"orientation\",\"doc\":\"Optional orientation of the item\",\"d" +
				"efault\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"e" +
				"u.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, r" +
				"anging from [0, 360) where 0 is pointing towards the geographic north. The yaw v" +
				"alue is applied in a clockwise rotation over the item’s heading/yaw-axis. A yaw " +
				"value of 90 makes the item face east, while a yaw of 270 makes it face west\",\"ty" +
				"pe\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90] " +
				"where 0 is perpendicular to the line between the item’s location and the centre " +
				"of the WGS84-based ellipsoid. The pitch value is applied in a counter-clockwise " +
				"rotation over the item’s pitch-axis. A pitch value of 45 makes the item face 45 " +
				"degrees upwards, while a pitch of -20 makes it face 20 degrees downwards\",\"type\"" +
				":\"double\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, ranging from (-180, 180] wh" +
				"ere 0 is perpendicular to the line between the item’s location and the centre of" +
				" the WGS84-based ellipsoid. The roll value is applied in a clockwise rotation ov" +
				"er the item’s roll/bank-axis. A roll value of 45 makes the item roll 45 degrees " +
				"to the right, while a roll of -50 makes it roll 50 degrees to the left\",\"type\":\"" +
				"double\"}]}]},{\"name\":\"velocity\",\"doc\":\"Optional velocity of the item\",\"default\":" +
				"null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"eu.driver.mo" +
				"del.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"In decimal degrees, ranging from" +
				" [0, 360) where 0 is pointing towards the geographic north. The yaw value is app" +
				"lied in a clockwise rotation over the item’s heading/yaw-axis. A yaw value of 90" +
				" makes the item face east, while a yaw of 270 makes it face west\",\"type\":\"double" +
				"\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees, ranging from [-90, 90] where 0 is " +
				"perpendicular to the line between the item’s location and the centre of the WGS8" +
				"4-based ellipsoid. The pitch value is applied in a counter-clockwise rotation ov" +
				"er the item’s pitch-axis. A pitch value of 45 makes the item face 45 degrees upw" +
				"ards, while a pitch of -20 makes it face 20 degrees downwards\",\"type\":\"double\"}," +
				"{\"name\":\"magnitude\",\"doc\":\"In meter per seconds, ranging from [0, infinity) wher" +
				"e 0 is standing still relative to the earth’s rotation\",\"type\":\"double\"}]}]}],\"_" +
				"comment\":\"TODO: Include itemType property into tags? Do we want to include child" +
				"ren (items that belong to this main time) to facilitate items inside items?\"}}}," +
				"{\"name\":\"name\",\"doc\":\"Optional name of the unit\",\"default\":null,\"type\":[\"null\",\"" +
				"string\"]},{\"name\":\"type\",\"doc\":\"Optional type of the unit\",\"default\":null,\"type\"" +
				":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional unique identifier of the con" +
				"nected application owning the unit\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"n" +
				"ame\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseconds marking the tim" +
				"e the update was performed\",\"default\":null,\"type\":[\"null\",\"long\"],\"logicalType\":" +
				"\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional map containing unit specific " +
				"information: key – unique name of the specific property; value – value of that p" +
				"roperty\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name" +
				"\":\"location\",\"doc\":\"Optional location of the unit\",\"default\":null,\"type\":[\"null\"" +
				",{\"type\":\"record\",\"name\":\"UnitLocation\",\"namespace\":\"eu.driver.model.sim.support" +
				"\",\"fields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, ranging from [-90, 90]" +
				" where 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"In decimal " +
				"degrees, ranging from (-180, 180] where 0 is the Prime Meridian (line going thro" +
				"ugh the geographic north, Greenwich, and the geographic south)\",\"type\":\"double\"}" +
				",{\"name\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the surface of the WGS" +
				"84-based ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}]}],\"_comment\":\"TO" +
				"DO: Include type property into tags?\"}");
		/// <summary>
		/// Unique identifier of the unit
		/// </summary>
		private string _id;
		/// <summary>
		/// List of items that belong to the unit
		/// </summary>
		private IList<eu.driver.model.sim.entity.Item> _items;
		/// <summary>
		/// Optional name of the unit
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional type of the unit
		/// </summary>
		private string _type;
		/// <summary>
		/// Optional unique identifier of the connected application owning the unit
		/// </summary>
		private string _owner;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional map containing unit specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional location of the unit
		/// </summary>
		private eu.driver.model.sim.support.UnitLocation _location;
		public virtual Schema Schema
		{
			get
			{
				return Unit._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the unit
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// List of items that belong to the unit
		/// </summary>
		public IList<eu.driver.model.sim.entity.Item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items = value;
			}
		}
		/// <summary>
		/// Optional name of the unit
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional type of the unit
		/// </summary>
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Optional unique identifier of the connected application owning the unit
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional map containing unit specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional location of the unit
		/// </summary>
		public eu.driver.model.sim.support.UnitLocation location
		{
			get
			{
				return this._location;
			}
			set
			{
				this._location = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.items;
			case 2: return this.name;
			case 3: return this.type;
			case 4: return this.owner;
			case 5: return this.timestamp;
			case 6: return this.tags;
			case 7: return this.location;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.items = (IList<eu.driver.model.sim.entity.Item>)fieldValue; break;
			case 2: this.name = (System.String)fieldValue; break;
			case 3: this.type = (System.String)fieldValue; break;
			case 4: this.owner = (System.String)fieldValue; break;
			case 5: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 6: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 7: this.location = (eu.driver.model.sim.support.UnitLocation)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
