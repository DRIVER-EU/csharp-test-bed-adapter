// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.entity
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class PointOfInterest : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"PointOfInterest\",\"namespace\":\"eu.driver.model.sim.entity" +
				"\",\"fields\":[{\"name\":\"id\",\"doc\":\"Unique identifier of the point-of-interest\",\"typ" +
				"e\":\"string\"},{\"name\":\"location\",\"doc\":\"Location of the point-of-interest\",\"type\"" +
				":{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.support\",\"f" +
				"ields\":[{\"name\":\"latitude\",\"doc\":\"In decimal degrees, ranging from [-90, 90] whe" +
				"re 0 is the equator\",\"type\":\"double\"},{\"name\":\"longitude\",\"doc\":\"In decimal degr" +
				"ees, ranging from (-180, 180] where 0 is the Prime Meridian (line going through " +
				"the geographic north, Greenwich, and the geographic south)\",\"type\":\"double\"},{\"n" +
				"ame\":\"altitude\",\"doc\":\"Optional in meters, where 0 is the surface of the WGS84-b" +
				"ased ellipsoid\",\"default\":null,\"type\":[\"null\",\"double\"]}]}},{\"name\":\"name\",\"doc\"" +
				":\"Optional name of the point-of-interest\",\"default\":null,\"type\":[\"null\",\"string\"" +
				"]},{\"name\":\"type\",\"doc\":\"Optional type of the point-of-interest\",\"default\":null," +
				"\"type\":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional unique identifier of t" +
				"he connected application owning the point-of-interest\",\"default\":null,\"type\":[\"n" +
				"ull\",\"string\"]},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in milliseco" +
				"nds marking the time the update was performed\",\"default\":null,\"type\":[\"null\",\"lo" +
				"ng\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional map contai" +
				"ning point-of-interest specific information: key – unique name of the specific p" +
				"roperty; value – value of that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"" +
				"map\",\"values\":\"string\"}]},{\"name\":\"orientation\",\"doc\":\"Optional orientation of t" +
				"he point-of-interest\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Ori" +
				"entation\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"yaw\",\"doc" +
				"\":\"In decimal degrees, ranging from [0, 360) where 0 is pointing towards the geo" +
				"graphic north. The yaw value is applied in a clockwise rotation over the item’s " +
				"heading/yaw-axis. A yaw value of 90 makes the item face east, while a yaw of 270" +
				" makes it face west\",\"type\":\"double\"},{\"name\":\"pitch\",\"doc\":\"In decimal degrees," +
				" ranging from [-90, 90] where 0 is perpendicular to the line between the item’s " +
				"location and the centre of the WGS84-based ellipsoid. The pitch value is applied" +
				" in a counter-clockwise rotation over the item’s pitch-axis. A pitch value of 45" +
				" makes the item face 45 degrees upwards, while a pitch of -20 makes it face 20 d" +
				"egrees downwards\",\"type\":\"double\"},{\"name\":\"roll\",\"doc\":\"In decimal degrees, ran" +
				"ging from (-180, 180] where 0 is perpendicular to the line between the item’s lo" +
				"cation and the centre of the WGS84-based ellipsoid. The roll value is applied in" +
				" a clockwise rotation over the item’s roll/bank-axis. A roll value of 45 makes t" +
				"he item roll 45 degrees to the right, while a roll of -50 makes it roll 50 degre" +
				"es to the left\",\"type\":\"double\"}]}]},{\"name\":\"address\",\"doc\":\"Optional address i" +
				"nformation of the point-of-interest\",\"default\":null,\"type\":[\"null\",{\"type\":\"reco" +
				"rd\",\"name\":\"Address\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\"" +
				":\"street\",\"doc\":\"Optional street name including house number\",\"default\":null,\"ty" +
				"pe\":[\"null\",\"string\"]},{\"name\":\"postalCode\",\"doc\":\"Optional postal code\",\"defaul" +
				"t\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"city\",\"doc\":\"Optional name of the cit" +
				"y\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"state\",\"doc\":\"Optional name" +
				" of the state or province\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"cou" +
				"ntry\",\"doc\":\"Optional name of the country\",\"default\":null,\"type\":[\"null\",\"string" +
				"\"]}]}]},{\"name\":\"entities\",\"doc\":\"Optional list of entity identifiers that are a" +
				"t the point-of-interest\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"" +
				"string\"}]}],\"_comment\":\"TODO: Include type property into tags? Do we need entiti" +
				"es property?\"}");
		/// <summary>
		/// Unique identifier of the point-of-interest
		/// </summary>
		private string _id;
		/// <summary>
		/// Location of the point-of-interest
		/// </summary>
		private eu.driver.model.sim.support.Location _location;
		/// <summary>
		/// Optional name of the point-of-interest
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional type of the point-of-interest
		/// </summary>
		private string _type;
		/// <summary>
		/// Optional unique identifier of the connected application owning the point-of-interest
		/// </summary>
		private string _owner;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional map containing point-of-interest specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		/// <summary>
		/// Optional orientation of the point-of-interest
		/// </summary>
		private eu.driver.model.sim.support.Orientation _orientation;
		/// <summary>
		/// Optional address information of the point-of-interest
		/// </summary>
		private eu.driver.model.sim.support.Address _address;
		/// <summary>
		/// Optional list of entity identifiers that are at the point-of-interest
		/// </summary>
		private IList<System.String> _entities;
		public virtual Schema Schema
		{
			get
			{
				return PointOfInterest._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the point-of-interest
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// Location of the point-of-interest
		/// </summary>
		public eu.driver.model.sim.support.Location location
		{
			get
			{
				return this._location;
			}
			set
			{
				this._location = value;
			}
		}
		/// <summary>
		/// Optional name of the point-of-interest
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional type of the point-of-interest
		/// </summary>
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Optional unique identifier of the connected application owning the point-of-interest
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional map containing point-of-interest specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		/// <summary>
		/// Optional orientation of the point-of-interest
		/// </summary>
		public eu.driver.model.sim.support.Orientation orientation
		{
			get
			{
				return this._orientation;
			}
			set
			{
				this._orientation = value;
			}
		}
		/// <summary>
		/// Optional address information of the point-of-interest
		/// </summary>
		public eu.driver.model.sim.support.Address address
		{
			get
			{
				return this._address;
			}
			set
			{
				this._address = value;
			}
		}
		/// <summary>
		/// Optional list of entity identifiers that are at the point-of-interest
		/// </summary>
		public IList<System.String> entities
		{
			get
			{
				return this._entities;
			}
			set
			{
				this._entities = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.location;
			case 2: return this.name;
			case 3: return this.type;
			case 4: return this.owner;
			case 5: return this.timestamp;
			case 6: return this.tags;
			case 7: return this.orientation;
			case 8: return this.address;
			case 9: return this.entities;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.location = (eu.driver.model.sim.support.Location)fieldValue; break;
			case 2: this.name = (System.String)fieldValue; break;
			case 3: this.type = (System.String)fieldValue; break;
			case 4: this.owner = (System.String)fieldValue; break;
			case 5: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 6: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			case 7: this.orientation = (eu.driver.model.sim.support.Orientation)fieldValue; break;
			case 8: this.address = (eu.driver.model.sim.support.Address)fieldValue; break;
			case 9: this.entities = (IList<System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
