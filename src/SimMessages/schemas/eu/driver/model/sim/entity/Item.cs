// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.entity
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Item : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"eu.driver.model.sim.entity\",\"fields\":" +
				"[{\"name\":\"guid\",\"doc\":\"Globally unique identifier for this entity\",\"type\":\"strin" +
				"g\"},{\"name\":\"name\",\"doc\":\"Name of this entity\",\"type\":\"string\"},{\"name\":\"owner\"," +
				"\"doc\":\"Identifier of the simulator currently responsible for this entity\",\"type\"" +
				":\"string\"},{\"name\":\"location\",\"doc\":\"Location of this item\",\"type\":{\"type\":\"reco" +
				"rd\",\"name\":\"Location\",\"namespace\":\"eu.driver.model.sim.geo\",\"fields\":[{\"name\":\"l" +
				"atitude\",\"doc\":\"Latitude in degrees (-90, 90] - 0 is equator\",\"type\":\"double\"},{" +
				"\"name\":\"longitude\",\"doc\":\"Longitude in degrees (-180, 180] - 0 is line [geograph" +
				"ic north - Greenwich - geographic south]\",\"type\":\"double\"},{\"name\":\"altitude\",\"d" +
				"oc\":\"Altitude in meters - 0 is surface of WGS84-based ellipsoid\",\"default\":null," +
				"\"type\":[\"null\",\"double\"]}]}},{\"name\":\"orientation\",\"doc\":\"Orientation of this it" +
				"em\",\"type\":{\"type\":\"record\",\"name\":\"Orientation\",\"namespace\":\"eu.driver.model.si" +
				"m.geo\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"Yaw or heading in degrees [0, 360) - 0 is " +
				"pointing towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST\",\"type" +
				"\":\"double\"},{\"name\":\"pitch\",\"doc\":\"Pitch in degrees (-90, 90] - 0 is perpendicul" +
				"ar to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is " +
				"45 degrees pointing upwards, -45 is 45 degrees pointing downwards\",\"type\":\"doubl" +
				"e\"},{\"name\":\"roll\",\"doc\":\"Roll or bank in degrees (-180, 180] - 0 is perpendicul" +
				"ar to line [origin of item - centre of WGS84-based ellipsoid] - bank of +45 is 4" +
				"5 degrees roll to the right, -45 is 45 degrees roll to the left\",\"type\":\"double\"" +
				"}]}},{\"name\":\"velocity\",\"doc\":\"Movement vector of the item, including the magnit" +
				"ude\",\"type\":{\"type\":\"record\",\"name\":\"Velocity\",\"namespace\":\"eu.driver.model.sim." +
				"geo\",\"fields\":[{\"name\":\"yaw\",\"doc\":\"Yaw or heading in degrees [0, 360) - 0 is po" +
				"inting towards geographic north - yaw of 90 is EAST, yaw of 270 is WEST\",\"type\":" +
				"\"double\"},{\"name\":\"pitch\",\"doc\":\"Pitch in degrees (-90, 90] - 0 is perpendicular" +
				" to line [origin of item - centre of WGS84-based ellipsoid] - pitch of +45 is 45" +
				" degrees pointing upwards, -45 is 45 degrees pointing downwards\",\"type\":\"double\"" +
				"},{\"name\":\"magnitude\",\"doc\":\"Velocity in meter per second [0, inf) - 0 is standi" +
				"ng still relative to the earth\",\"type\":\"double\"}]}},{\"name\":\"visibleForParticipa" +
				"nt\",\"doc\":\"Indication whether or not this item is visible for all participants\"," +
				"\"type\":\"boolean\"},{\"name\":\"movable\",\"doc\":\"Indication whether or not this item i" +
				"s movable in the simulation world\",\"type\":\"boolean\"},{\"name\":\"itemType\",\"doc\":\"C" +
				"oncrete type of this item - can be of type ObjectType, PersonType or VehicleType" +
				"\",\"default\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ObjectType\",\"namespace\"" +
				":\"eu.driver.model.sim.entity.item\",\"fields\":[{\"name\":\"subType\",\"doc\":\"Sub type o" +
				"f objects that this item is\",\"type\":{\"type\":\"enum\",\"name\":\"ObjectSubType\",\"names" +
				"pace\":\"eu.driver.model.sim.entity.item\",\"symbols\":[\"PROP\",\"TOOL\"]}}]},{\"type\":\"r" +
				"ecord\",\"name\":\"PersonType\",\"namespace\":\"eu.driver.model.sim.entity.item\",\"fields" +
				"\":[{\"name\":\"gender\",\"doc\":\"Gender of the person\",\"type\":{\"type\":\"enum\",\"name\":\"P" +
				"ersonSubType\",\"namespace\":\"eu.driver.model.sim.entity.item\",\"symbols\":[\"MALE\",\"F" +
				"EMALE\",\"UNKNOWN\"]}}]},{\"type\":\"record\",\"name\":\"VehicleType\",\"namespace\":\"eu.driv" +
				"er.model.sim.entity.item\",\"fields\":[{\"name\":\"subType\",\"doc\":\"Sub type of vehicle" +
				"s that this item is\",\"type\":{\"type\":\"enum\",\"name\":\"VehicleSubType\",\"namespace\":\"" +
				"eu.driver.model.sim.entity.item\",\"symbols\":[\"CAR\",\"VAN\",\"TRUCK\",\"BOAT\",\"PLANE\",\"" +
				"HELICOPTER\",\"MOTORCYCLE\"]}}]}]},{\"name\":\"scenarioLabel\",\"doc\":\"Scenario type of " +
				"this item - can be of type EnvironmentLabel, IncidentLabel or RescueLabel\",\"defa" +
				"ult\":null,\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EnvironmentLabel\",\"namespace\":" +
				"\"eu.driver.model.sim.entity.item\",\"fields\":[{\"name\":\"subLabel\",\"doc\":\"Sub label " +
				"of environment that this item has\",\"type\":{\"type\":\"enum\",\"name\":\"EnvironmentSubL" +
				"abel\",\"namespace\":\"eu.driver.model.sim.entity.item\",\"symbols\":[\"FOLIAGE\",\"ROAD\"]" +
				"}}]},{\"type\":\"record\",\"name\":\"IncidentLabel\",\"namespace\":\"eu.driver.model.sim.en" +
				"tity.item\",\"fields\":[{\"name\":\"subLabel\",\"doc\":\"Sub label of incident that this i" +
				"tem has\",\"type\":{\"type\":\"enum\",\"name\":\"IncidentSubLabel\",\"namespace\":\"eu.driver." +
				"model.sim.entity.item\",\"symbols\":[\"FIRE\",\"CRASH\"]}}]},{\"type\":\"record\",\"name\":\"R" +
				"escueLabel\",\"namespace\":\"eu.driver.model.sim.entity.item\",\"fields\":[{\"name\":\"sub" +
				"Label\",\"doc\":\"Sub label of rescue that this item has\",\"type\":{\"type\":\"enum\",\"nam" +
				"e\":\"RescueSubLabel\",\"namespace\":\"eu.driver.model.sim.entity.item\",\"symbols\":[\"PO" +
				"LICE\",\"MEDICAL\",\"FIRE\",\"SECURITY\",\"MILITARY\"]}}]}]},{\"name\":\"userTags\",\"doc\":\"Li" +
				"st of all tags the user provided associated with this item\",\"default\":null,\"type" +
				"\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]},{\"name\":\"physicalConnections\",\"doc" +
				"\":\"List of physical connection entities references (represented by their GUIDs) " +
				"this item has\",\"default\":null,\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]}" +
				",{\"name\":\"group\",\"doc\":\"Reference to the group connection entity (represented by" +
				" its GUID) this item is part of\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name" +
				"\":\"formation\",\"doc\":\"Reference to the formation connection entity (represented b" +
				"y its GUID) this item is part of\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"nam" +
				"e\":\"unit\",\"doc\":\"Reference to the unit connection entity (represented by its GUI" +
				"D) this item is part of\",\"default\":null,\"type\":[\"null\",\"string\"]}]}");
		/// <summary>
		/// Globally unique identifier for this entity
		/// </summary>
		private string _guid;
		/// <summary>
		/// Name of this entity
		/// </summary>
		private string _name;
		/// <summary>
		/// Identifier of the simulator currently responsible for this entity
		/// </summary>
		private string _owner;
		/// <summary>
		/// Location of this item
		/// </summary>
		private eu.driver.model.sim.geo.Location _location;
		/// <summary>
		/// Orientation of this item
		/// </summary>
		private eu.driver.model.sim.geo.Orientation _orientation;
		/// <summary>
		/// Movement vector of the item, including the magnitude
		/// </summary>
		private eu.driver.model.sim.geo.Velocity _velocity;
		/// <summary>
		/// Indication whether or not this item is visible for all participants
		/// </summary>
		private bool _visibleForParticipant;
		/// <summary>
		/// Indication whether or not this item is movable in the simulation world
		/// </summary>
		private bool _movable;
		/// <summary>
		/// Concrete type of this item - can be of type ObjectType, PersonType or VehicleType
		/// </summary>
		private object _itemType;
		/// <summary>
		/// Scenario type of this item - can be of type EnvironmentLabel, IncidentLabel or RescueLabel
		/// </summary>
		private object _scenarioLabel;
		/// <summary>
		/// List of all tags the user provided associated with this item
		/// </summary>
		private IList<System.String> _userTags;
		/// <summary>
		/// List of physical connection entities references (represented by their GUIDs) this item has
		/// </summary>
		private IList<System.String> _physicalConnections;
		/// <summary>
		/// Reference to the group connection entity (represented by its GUID) this item is part of
		/// </summary>
		private string _group;
		/// <summary>
		/// Reference to the formation connection entity (represented by its GUID) this item is part of
		/// </summary>
		private string _formation;
		/// <summary>
		/// Reference to the unit connection entity (represented by its GUID) this item is part of
		/// </summary>
		private string _unit;
		public virtual Schema Schema
		{
			get
			{
				return Item._SCHEMA;
			}
		}
		/// <summary>
		/// Globally unique identifier for this entity
		/// </summary>
		public string guid
		{
			get
			{
				return this._guid;
			}
			set
			{
				this._guid = value;
			}
		}
		/// <summary>
		/// Name of this entity
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Identifier of the simulator currently responsible for this entity
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Location of this item
		/// </summary>
		public eu.driver.model.sim.geo.Location location
		{
			get
			{
				return this._location;
			}
			set
			{
				this._location = value;
			}
		}
		/// <summary>
		/// Orientation of this item
		/// </summary>
		public eu.driver.model.sim.geo.Orientation orientation
		{
			get
			{
				return this._orientation;
			}
			set
			{
				this._orientation = value;
			}
		}
		/// <summary>
		/// Movement vector of the item, including the magnitude
		/// </summary>
		public eu.driver.model.sim.geo.Velocity velocity
		{
			get
			{
				return this._velocity;
			}
			set
			{
				this._velocity = value;
			}
		}
		/// <summary>
		/// Indication whether or not this item is visible for all participants
		/// </summary>
		public bool visibleForParticipant
		{
			get
			{
				return this._visibleForParticipant;
			}
			set
			{
				this._visibleForParticipant = value;
			}
		}
		/// <summary>
		/// Indication whether or not this item is movable in the simulation world
		/// </summary>
		public bool movable
		{
			get
			{
				return this._movable;
			}
			set
			{
				this._movable = value;
			}
		}
		/// <summary>
		/// Concrete type of this item - can be of type ObjectType, PersonType or VehicleType
		/// </summary>
		public object itemType
		{
			get
			{
				return this._itemType;
			}
			set
			{
				this._itemType = value;
			}
		}
		/// <summary>
		/// Scenario type of this item - can be of type EnvironmentLabel, IncidentLabel or RescueLabel
		/// </summary>
		public object scenarioLabel
		{
			get
			{
				return this._scenarioLabel;
			}
			set
			{
				this._scenarioLabel = value;
			}
		}
		/// <summary>
		/// List of all tags the user provided associated with this item
		/// </summary>
		public IList<System.String> userTags
		{
			get
			{
				return this._userTags;
			}
			set
			{
				this._userTags = value;
			}
		}
		/// <summary>
		/// List of physical connection entities references (represented by their GUIDs) this item has
		/// </summary>
		public IList<System.String> physicalConnections
		{
			get
			{
				return this._physicalConnections;
			}
			set
			{
				this._physicalConnections = value;
			}
		}
		/// <summary>
		/// Reference to the group connection entity (represented by its GUID) this item is part of
		/// </summary>
		public string group
		{
			get
			{
				return this._group;
			}
			set
			{
				this._group = value;
			}
		}
		/// <summary>
		/// Reference to the formation connection entity (represented by its GUID) this item is part of
		/// </summary>
		public string formation
		{
			get
			{
				return this._formation;
			}
			set
			{
				this._formation = value;
			}
		}
		/// <summary>
		/// Reference to the unit connection entity (represented by its GUID) this item is part of
		/// </summary>
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				this._unit = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.guid;
			case 1: return this.name;
			case 2: return this.owner;
			case 3: return this.location;
			case 4: return this.orientation;
			case 5: return this.velocity;
			case 6: return this.visibleForParticipant;
			case 7: return this.movable;
			case 8: return this.itemType;
			case 9: return this.scenarioLabel;
			case 10: return this.userTags;
			case 11: return this.physicalConnections;
			case 12: return this.group;
			case 13: return this.formation;
			case 14: return this.unit;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.guid = (System.String)fieldValue; break;
			case 1: this.name = (System.String)fieldValue; break;
			case 2: this.owner = (System.String)fieldValue; break;
			case 3: this.location = (eu.driver.model.sim.geo.Location)fieldValue; break;
			case 4: this.orientation = (eu.driver.model.sim.geo.Orientation)fieldValue; break;
			case 5: this.velocity = (eu.driver.model.sim.geo.Velocity)fieldValue; break;
			case 6: this.visibleForParticipant = (System.Boolean)fieldValue; break;
			case 7: this.movable = (System.Boolean)fieldValue; break;
			case 8: this.itemType = (System.Object)fieldValue; break;
			case 9: this.scenarioLabel = (System.Object)fieldValue; break;
			case 10: this.userTags = (IList<System.String>)fieldValue; break;
			case 11: this.physicalConnections = (IList<System.String>)fieldValue; break;
			case 12: this.group = (System.String)fieldValue; break;
			case 13: this.formation = (System.String)fieldValue; break;
			case 14: this.unit = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
