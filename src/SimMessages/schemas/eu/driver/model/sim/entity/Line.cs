// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen.exe, version 0.9.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace eu.driver.model.sim.entity
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Line : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"Line\",\"namespace\":\"eu.driver.model.sim.entity\",\"fields\":" +
				"[{\"name\":\"id\",\"doc\":\"Unique identifier of the line\",\"type\":\"string\"},{\"name\":\"po" +
				"ints\",\"doc\":\"List of locations, creating an edge between every consecutive locat" +
				"ion in the list\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Locatio" +
				"n\",\"namespace\":\"eu.driver.model.sim.support\",\"fields\":[{\"name\":\"latitude\",\"doc\":" +
				"\"In decimal degrees, ranging from [-90, 90] where 0 is the equator\",\"type\":\"doub" +
				"le\"},{\"name\":\"longitude\",\"doc\":\"In decimal degrees, ranging from (-180, 180] whe" +
				"re 0 is the Prime Meridian (line going through the geographic north, Greenwich, " +
				"and the geographic south)\",\"type\":\"double\"},{\"name\":\"altitude\",\"doc\":\"Optional i" +
				"n meters, where 0 is the surface of the WGS84-based ellipsoid\",\"default\":null,\"t" +
				"ype\":[\"null\",\"double\"]}]}}},{\"name\":\"name\",\"doc\":\"Optional name of the line\",\"de" +
				"fault\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"doc\":\"Optional type of the" +
				" line\",\"default\":null,\"type\":[\"null\",\"string\"]},{\"name\":\"owner\",\"doc\":\"Optional " +
				"unique identifier of the connected application owning the line\",\"default\":null,\"" +
				"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\",\"doc\":\"Optional UNIX Epoch time in " +
				"milliseconds marking the time the update was performed\",\"default\":null,\"type\":[\"" +
				"null\",\"long\"],\"logicalType\":\"timestamp-millis\"},{\"name\":\"tags\",\"doc\":\"Optional m" +
				"ap containing line specific information: key – unique name of the specific prope" +
				"rty; value – value of that property\",\"default\":null,\"type\":[\"null\",{\"type\":\"map\"" +
				",\"values\":\"string\"}]}],\"_comment\":\"TODO: Include type property into tags?\"}");
		/// <summary>
		/// Unique identifier of the line
		/// </summary>
		private string _id;
		/// <summary>
		/// List of locations, creating an edge between every consecutive location in the list
		/// </summary>
		private IList<eu.driver.model.sim.support.Location> _points;
		/// <summary>
		/// Optional name of the line
		/// </summary>
		private string _name;
		/// <summary>
		/// Optional type of the line
		/// </summary>
		private string _type;
		/// <summary>
		/// Optional unique identifier of the connected application owning the line
		/// </summary>
		private string _owner;
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		private System.Nullable<long> _timestamp;
		/// <summary>
		/// Optional map containing line specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		private IDictionary<string,System.String> _tags;
		public virtual Schema Schema
		{
			get
			{
				return Line._SCHEMA;
			}
		}
		/// <summary>
		/// Unique identifier of the line
		/// </summary>
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		/// <summary>
		/// List of locations, creating an edge between every consecutive location in the list
		/// </summary>
		public IList<eu.driver.model.sim.support.Location> points
		{
			get
			{
				return this._points;
			}
			set
			{
				this._points = value;
			}
		}
		/// <summary>
		/// Optional name of the line
		/// </summary>
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		/// <summary>
		/// Optional type of the line
		/// </summary>
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				this._type = value;
			}
		}
		/// <summary>
		/// Optional unique identifier of the connected application owning the line
		/// </summary>
		public string owner
		{
			get
			{
				return this._owner;
			}
			set
			{
				this._owner = value;
			}
		}
		/// <summary>
		/// Optional UNIX Epoch time in milliseconds marking the time the update was performed
		/// </summary>
		public System.Nullable<long> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				this._timestamp = value;
			}
		}
		/// <summary>
		/// Optional map containing line specific information: key – unique name of the specific property; value – value of that property
		/// </summary>
		public IDictionary<string,System.String> tags
		{
			get
			{
				return this._tags;
			}
			set
			{
				this._tags = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.id;
			case 1: return this.points;
			case 2: return this.name;
			case 3: return this.type;
			case 4: return this.owner;
			case 5: return this.timestamp;
			case 6: return this.tags;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.id = (System.String)fieldValue; break;
			case 1: this.points = (IList<eu.driver.model.sim.support.Location>)fieldValue; break;
			case 2: this.name = (System.String)fieldValue; break;
			case 3: this.type = (System.String)fieldValue; break;
			case 4: this.owner = (System.String)fieldValue; break;
			case 5: this.timestamp = (System.Nullable<long>)fieldValue; break;
			case 6: this.tags = (IDictionary<string,System.String>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
